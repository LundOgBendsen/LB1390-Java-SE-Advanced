package savingpersons;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Serializable;

public class Person implements Serializable {
	private String name;

	private int bornIn;

	private double height;

	public Person(String name, int bornIn, double height) {
		this.name = name;
		this.bornIn = bornIn;
		this.height = height;
	}

	public String toString() {
		return "Person[name=" + name + ", bornIn=" + bornIn + ", height="
				+ height + "]";
	}

	public void saveAsSerialized(String fileName) throws IOException {
		FileOutputStream fos = new FileOutputStream(fileName);
		ObjectOutputStream oos = new ObjectOutputStream(fos);
		oos.writeObject(this);
		oos.flush();
		oos.close();
		fos.close();
	}

	public static Person loadFromSerialized(String fileName)
			throws IOException, ClassNotFoundException {
		FileInputStream fis = new FileInputStream(fileName);
		ObjectInputStream ois = new ObjectInputStream(fis);
		Object o = ois.readObject();
		ois.close();
		fis.close();
		Person p = (Person) o;
		return p;
	}

	public void saveAsJavaData(String fileName) throws IOException {
		FileOutputStream fos = new FileOutputStream(fileName);
		DataOutputStream dos = new DataOutputStream(fos);
		dos.writeUTF(this.name);
		dos.writeInt(this.bornIn);
		dos.writeDouble(this.height);
		dos.flush();
		dos.close();
		fos.close();
	}

	public static Person loadFromJavaData(String fileName) throws IOException {
		FileInputStream fis = new FileInputStream(fileName);
		DataInputStream dis = new DataInputStream(fis);
		String name = dis.readUTF();
		int bornIn = dis.readInt();
		double height = dis.readDouble();
		Person p = new Person(name, bornIn, height);
		dis.close();
		fis.close();
		return p;
	}

	public void saveAsText(String fileName, String encoding) throws IOException {
		FileOutputStream fos = new FileOutputStream(fileName);
		OutputStreamWriter fw = new OutputStreamWriter(fos, encoding);
		PrintWriter pw = new PrintWriter(fw);
		pw.println(this.name);
		pw.println(this.bornIn);
		pw.println(this.height);
		pw.flush();
		pw.close();
	}

	public static Person loadFromText(String fileName, String encoding)
			throws IOException {
		FileInputStream fis = new FileInputStream(fileName);
		InputStreamReader fr = new InputStreamReader(fis, encoding);
		BufferedReader br = new BufferedReader(fr);
		String name = br.readLine();
		String bornInAsString = br.readLine();
		int bornIn = Integer.parseInt(bornInAsString);
		String heightAsString = br.readLine();
		double height = Double.parseDouble(heightAsString);
		Person p = new Person(name, bornIn, height);
		br.close();
		fr.close();
		return p;
	}
}